const { Router } = require('express');
const { check, validationResult } = require('express-validator');
const config = require('config');
const bcrypt = require('bcryptjs');
const User = require('../models/User');
const auth = require('../middleware/auth.middleware');
const router = Router();
const nodemailer = require('nodemailer');

const sendUserMail = async (userName, userEmail, userPass) => {
	const transporter = nodemailer.createTransport({
		host: 'smtp.yandex.ru',
		port: 465,
		secure: true,
		auth: {
			user: config.get('mailerUser'),
			pass: config.get('mailerPass'),
		},
	});

	const info = await transporter.sendMail({
		from: `Online Education üìö ${config.get('mailerFrom')}`, // sender address
		to: userEmail, // list of receivers
		subject: `Hello ${userName} ! Your registration data inside ‚úîÔ∏è`, // Subject line
		//text: 'Hello world?', // plain text body
		html: `
			<h2>–í–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h2>
			<p>–î–ª—è –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:</p>
			<p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: ${config.get('baseUrl')}/login</p>
			<p>–õ–æ–≥–∏–Ω: ${userEmail}</p>
			<p>–ü–∞—Ä–æ–ª—å: ${userPass}</p>
		`, // html body
	});

	console.log('Message sent: %s', info.messageId);
};

router.get('/', auth, async (req, res) => {
	try {
		const user = await User.find();
		res.json(user);
	} catch (e) {
		console.log('users_get__', e);
		res.status(500).json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
	}
});

router.get('/:id', auth, async (req, res) => {
	try {
		const user = await User.findById(req.params.id);
		res.json(user);
	} catch (e) {
		console.log('user_get_by_id__', e);

		res.status(500).json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
	}
});

router.put('/change/:id', auth, async (req, res) => {
	try {
		const user = await User.findById(req.params.id);
		if (user) {
			const _roles = user.roles;

			const _currentRole = _roles.find((role) => role === req.body.role);
			if (_currentRole) {
				res.json({
					status: false,
					message: '–£ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —ç—Ç–∞ —Ä–æ–ª—å',
				});
			} else {
				_roles.push(req.body.role);
				await user.updateOne({ roles: _roles });
				res.json({ status: true });
			}
		}
	} catch (e) {
		console.log('users_roles_change_by_id__', e);
		res.status(500).json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
	}
});

router.post(
	'/create',
	[
		auth,
		check('name', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 3 —Å–∏–º–≤–æ–ª–∞').isLength({ min: 3 }),
		check('email', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email').isEmail(),
		check('password', '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è 6 —Å–∏–º–≤–æ–ª–æ–≤').isLength({
			min: 6,
		}),
	],
	async (req, res) => {
		try {
			const errors = validationResult(req);

			if (!errors.isEmpty()) {
				return res.status(400).json({
					errors: errors.array(),
					message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
				});
			}

			const { name, email, password, roles } = req.body;

			const rolesArr = [];
			roles ? rolesArr.push('all', roles) : rolesArr.push('all');

			const candidate = await User.findOne({ email });

			if (candidate) {
				return res
					.status(400)
					.json({ message: '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
			}

			const hashedPassword = await bcrypt.hash(password, 12);
			const user = new User({
				name,
				email,
				password: hashedPassword,
				roles: rolesArr,
			});

			await user.save();

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–∏—Å—å–º–æ
			sendUserMail(name, email, password).catch(console.error);

			res.status(201).json(user);
		} catch (e) {
			console.log('user_post__', e);
			res
				.status(500)
				.json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
		}
	},
);

module.exports = router;
