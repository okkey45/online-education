const { Router } = require('express');
const { check, validationResult } = require('express-validator');
const config = require('config');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const accActivate = require('../middleware/accounActivate.middleware');
const User = require('../models/User');
//const User_Groups = require('../models/User_Groups');
const router = Router();
const nodemailer = require('nodemailer');

const sendUserMail = async (userName = '', userEmail, token) => {
	const transporter = nodemailer.createTransport({
		host: 'smtp.yandex.ru',
		port: 465,
		secure: true,
		auth: {
			user: config.get('mailerUser'),
			pass: config.get('mailerPass'),
		},
	});

	const info = await transporter.sendMail({
		from: `"Online Education üëª" ${config.get('mailerFrom')}`, // sender address
		to: userEmail, // list of receivers
		subject: `Hello ${userName} ! Confirm your email ‚úî`, // Subject line
		//text: 'Hello world?', // plain text body
		html: `
			<h2>–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:</h2>
			<p><a href="${config.get(
				'baseUrl',
			)}/api/auth/activate/${token}">–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç</a></p>
			<p>–ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.</p>
			<p>–õ–æ–≥–∏–Ω: ${userEmail}</p>
			<p>–ü–∞—Ä–æ–ª—å: –≤–∞—à –ø–∞—Ä–æ–ª—å</p>
		`, // html body
	});

	console.log('Message sent: %s', info.messageId);
};

// /api/auth/register
router.post(
	'/register',
	[
		check('name', '–ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞').isLength({ min: 3 }),
		check('email', '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email').isEmail(),
		check('password', '–ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤').isLength({ min: 6 }),
	],
	async (req, res) => {
		try {
			const errors = validationResult(req);

			if (!errors.isEmpty()) {
				return res.status(400).json({
					errors: errors.array(),
					message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
				});
			}

			const { name, email, password, roles } = req.body;

			const rolesArr = [];
			roles ? rolesArr.push('all', roles) : rolesArr.push('all');

			const candidate = await User.findOne({ email });

			if (candidate) {
				return res
					.status(400)
					.json({ message: '–¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
			}

			const confirmToken = jwt.sign(
				{ name, email, password, rolesArr },
				config.get('jwtActivate'),
				{ expiresIn: '30m' },
			);

			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–∏—Å—å–º–æ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
			sendUserMail(name, email, confirmToken).catch(console.error);

			res.status(200).json({ message: 'Send email', email });
		} catch (e) {
			res
				.status(500)
				.json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
		}
	},
);

// /api/auth/activate/:token
router.get('/activate/:token', accActivate, async (req, res) => {
	try {
		const { name, email, password, rolesArr } = req.user;

		const hashedPassword = await bcrypt.hash(password, 12);
		const user = new User({
			name,
			email,
			password: hashedPassword,
			roles: rolesArr,
		});

		await user.save();

		const token = jwt.sign(
			{ userId: user._id, userRoles: user.roles },
			config.get('jwtSecret'),
			{
				expiresIn: '12h',
			},
		);

		res.redirect(`${config.get('baseUrl')}/login`);
	} catch (e) {
		res.status(500).json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
	}
});

// /api/auth/login
router.post(
	'/login',
	[
		check('email', '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email').normalizeEmail().isEmail(),
		check('password', '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.').exists().isLength({
			min: 6,
		}),
	],
	async (req, res) => {
		try {
			const errors = validationResult(req);

			if (!errors.isEmpty()) {
				return res.status(400).json({
					errors: errors.array(),
					message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É',
				});
			}

			const { email, password } = req.body;

			const user = await User.findOne({ email });

			if (!user) {
				return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
			}

			const isMatch = await bcrypt.compare(password, user.password);

			if (!isMatch) {
				return res
					.status(400)
					.json({ message: '–ù–µ –≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
			}

			const token = jwt.sign(
				{ userId: user.id, userRoles: user.roles },
				config.get('jwtSecret'),
				{
					expiresIn: '12h',
				},
			);

			res.json({ token, userId: user.id });
		} catch (e) {
			res
				.status(500)
				.json({ message: '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞' });
		}
	},
);

module.exports = router;
